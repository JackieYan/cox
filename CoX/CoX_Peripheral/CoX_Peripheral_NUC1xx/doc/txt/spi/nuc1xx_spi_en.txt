//********************************************************************************
//
//! \defgroup NUC1xx_SPI NUC1xx SPI
//!
//! \brief NUC140 SPI Peripheral Driver
//!
//! The CoX Peripheral Library also provides APIs for full functions of Nuvoton
//! NUC1xx SPI.This module supports the whole NUC1xx Series.
//!
//! <br /> 
//! <h1>Contents</h1>
//! - \ref NUC1xx_SPI_BLOCK
//! - \ref NUC1xx_SPI_Function_Desc
//! - \ref NUC1xx_SPI_API_Group
//!   - \ref NUC1xx_API_Group_Configure_Control
//!   - \ref NUC1xx_API_Group_Interrupt_Control
//!   - \ref NUC1xx_API_Group_TransferReceive_Control
//!   .
//! - \ref NUC1xx_SPI_Usage
//! .
//!
//! <br />
//! \section NUC1xx_SPI_BLOCK 1. Spi Physical Block
//! <img src="NUC1xx_spi_block.png" />
//!
//! <br />
//! \section NUC1xx_SPI_Function_Desc 2. Functional Description
//! The system control block has the following functions:
//! - The SPI controller can be configured as a master or a slave device. In master 
//!   mode the spi controller can drive up to two off-chip slave devices. It can also
//!   be set to FIFO mode or DMA mode with different rate and data width and slave select mode. 
//! - Each SPI controller can generate an individual interrupt when data transfer is finished,
//!   and the respective interrupt event flag IF will be set. The interrupt 
//!   event flag will generates an interrupt to CPU if the interrupt enable bit IE.
//! - The SPI controller can be set to different transfer and receive mode,including
//!   normal transfer and receive mode, burst transfer and receive mode, FIFO mode,
//!   and DMA mode. At the same time, it is a synchronous serial data communication 
//!   protocol which operates in full duplex mode.Devices communicate in master/slave
//!   mode with 4-wire bi-direction interface. 
//! .
//!
//! <br />
//! \subsection NUC1xx_SPI_API_Group 3. API Groups
//!
//! The Spi API is broken into three groups of functions:
//! - those that deal with SPI mode configure,
//! - those that deal with SPI interrupt control,
//! - those that deal with SPI transfer and receive controlling.
//! .
//! <br />
//! \subsection NUC1xx_API_Group_Configure_Control 3.1 SPI configuration control APIs
//!
//! - SPIConfig()
//! - SPIAutoSSEnable()
//! - SPIAutoSSDisable()
//! - SPISSSet()
//! - SPISSClear()
//! - SPISSConfig()
//! - SPILevelTriggerStatusGet()
//! - SPIFIFOModeSet()
//! - SPIByteReorderSet()
//! - SPIVariableClockSet()
//! - SPIDivOneFunction()
//! - SPI3WireFunction()
//! - SPI3PDMAEnable()
//! - SPI3PDMADisable()
//! - SPI3WireAbort()
//! .
//!
//! <br />
//! \subsection NUC1xx_API_Group_Interrupt_Control 3.2 SPI Interrupt Control APIs
//! - SPI3WireStartIntFlagClear()
//! - SPI3WireStartIntFlagGet()
//! - SPI3WireStartIntDisable()
//! - SPI3WireStartIntEnable()
//! - SPIIntFlagClear()
//! - SPIIntFlagGet()
//! - SPIIntDisable()
//! - SPIIntEnable()
//! .
//!
//! <br />
//! \subsection NUC1xx_API_Group_TransferReceive_Control 3.3 SPI Transfer&Receive Control
//!
//! - SPISingleDataReadWrite()
//! - SPIBitLengthGet()
//! - SPIDataRead()
//! - SPIBurstDataRead()
//! - SPIRxRegisterGet()
//! - SPIDataWrite()
//! - SPIBurstDataWrite()
//! - SPITxRegisterSet()
//! - SPIBitGoBusySet()
//! - SPIBitGoBusyClear()
//! - SPIIsBusy()
//! - SPIIsRxEmpty()
//! - SPIIsRxFull()
//! - SPIIsTxEmpty()
//! - SPIIsTxFull()
//! - SPIFIFOStatusGet()
//! .
//! <br />
//! \section NUC1xx_SPI_Usage 4 Program Examples
//! The following example shows how to use the SPI APIs to configue SPI and to implement 
//! the function of transferring and receiving. 
//! \code
//! #include "xhw_types.h"
//! #include "xsysctl.h"
//! #include "xhw_memmap.h"
//! #include "xspi.h"
//! #include "xhw_spi.h"
//! #include "xgpio.h"
//!
//! unsigned char ucSendData[] = "Wonderful World!";
//!
//! //*****************************************************************************
//!
//! //Ininite the SPI and implement the function of data transmission.
//!
//! //param None
//!
//! //This function is to ininite the SPI and implement the function of data transmission.
//!
//! //return none
//!
//! //*****************************************************************************
//! void SpiInitAndTransfer(void)
//! {
//!
//!    //
//!    // Step 1, Set SysClk 50MHz using Extern 12M oscillator
//!    //
//!    SysCtlClockSet(50000000, SYSCTL_OSC_MAIN | SYSCTL_XTAL_12MHZ);
//!
//!    //
//!    // Step 2, Enable Peripheral SPI0
//!    //
//!    SysCtlPeripheralEnable2(SPI0_BASE);
//! 
//!    //
//!    // Step 3, you should configures a pin for use as a SPI function
//!    //
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE, GPIO_PIN_0);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE, GPIO_PIN_1);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE, GPIO_PIN_2);
//!    GPIOPinFunctionSet(GPIO_FUNCTION_SPI, GPIO_PORTC_BASE, GPIO_PIN_3);
//!
//!    //
//!    // Step 4, you should configure MCU as a master or slave device , data width 
//!    // MSB or LSB first and Mode
//!    //
//!    SPIConfigSet(SPI0_BASE, 100000, SPI_MOTO_FORMAT_MODE_1 |
//!                                           SPI_MODE_MASTER | 
//!                                             SPI_MSB_FIRST |
//!                                            SPI_DATA_WIDTH8);
//!    //
//!    // Step 5, you should use SPI slave select pin to connect with an off-chip  
//!    // slave device. Slave select signal is active low.
//!    //
//!    SPISSSet(SPI0_BASE, SPI_SS_HARDWARE, SPI_SS0); 
//!     
//!    //
//!    // Step 6, you can transfer data right now.
//!    //
//!    SPIDataWrite(SPI0_BASE, ucSendData, 16);
//!  }
//!
//! \endcode
//! \note 
//!
//**********************************************************************************
