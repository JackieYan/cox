//*****************************************************************************************
//
//! \defgroup SPI
//!
//! \brief Serial Peripheral Interface (SPI) Peripheral Driver.
//!
//!  The Serial Peripheral Interface (SPI) is a synchronous serial data communication   
//!  protocol which operates in full duplex mode.  Devices communicate in master/slave mode
//!  with 4-wire bi-direction interface.
//!
//! - Configure the SPI controler as master device or a slave , it should generate clock 
//!   and chip-select signal if it is set as master .
//! - Each SPI controller can generates an individual interrupt when data transfer is finished  
//!   and the respective interrupt event flag IF will be set. The interrupt event flag will 
//!   generates an interrupt to CPU if the interrupt enable bit IE is set.
//! - Transfer and receive data which is in your mode
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref SPI_Blcok
//! - \ref SPI_Function_Desc
//!   - \ref SPI_Configure_Control
//!   - \ref SPI_Interrupt_Control
//!   - \ref SPI_TransferReceive_Control
//!   .
//! - \ref SPI_Applications
//! .
//!
//! \n
//! \section SPI_Blcok 1. SPI Physical Block
//! <img src="spi_block.png" />
//!
//! <br />
//! \section SPI_Function_Desc 2. SPI Function Description
//!
//! <br /> 
//! \subsection SPI_Configure_Control 2.1 SPI device controller configuration
//!
//! Configure the SPI controller as a master or a slave device. It should 
//! generate clock and chip-select signals if it is set as a master device.
//!
//! <br />
//! \subsection SPI_Interrupt_Control 2.2 SPI interrupt control
//! 
//! Each SPI controller can generate an individual interrupt when data transfer is finished  
//! and the respective interrupt event flag IF will be set. The interrupt event flag will 
//! generates an interrupt to CPU if the interrupt enable bit IE is set.
//!
//! <br />
//! \subsection SPI_TransferReceive_Control 2.3 SPI Transfer and Receive data
//! Transfer and receive data.
//! 
//! <br />
//! \section SPI_Applications 3. SPI Applications
//! will be added in the future
//!
//! <br />
//! \note Here are descriptions of the common functions of the SPI. The CoX SPI 
//! Interface is based on the functions above.
//
//******************************************************************************************


//******************************************************************************************
//
//! \defgroup xSPI xSPI
//! \brief CoX SPI Peripheral Interface
//!
//! The xSPI is the SPI Peripheral Interrupt of CoX.It defines some common macros and APIs
//! macro and APIs
//! 
//! <h1>Contents</h1>
//! - \ref CoX_SPI_How_Define
//! - \ref xSPI_API_Group_Peripheral
//!   - \ref xSPI_API_Group_Configure
//!   - \ref xSPI_API_Group_Interrupt
//!   - \ref xSPI_API_Group_TransferReceiveData
//!   .
//! - \ref xSPI_Usage
//! .
//!
//! <br />
//!
//! \section CoX_SPI_How_Define 1 How is the SPI API Standard Define?
//! CoX SPI defines the APIs based on the following common functions:
//! 
//! - SPI Configure Control
//!   - Master or Slave Select
//!   - Clock Mode and data width
//!   .
//! - SPI Interrupt control
//!   - Enable Interrupt
//!   - ISR and CallBack Function
//! .
//! - SPI Transfer and Receive 
//! - Configure SPI as master or slave mode
//! - Implement Transfer and Receive
//! .
//!
//! <br />
//! \section xSPI_API_Group_Peripheral 2 API Groups
//!
//! The CoX SPI APIs can be classified into three groups by functions:
//! - those that deal with SPI mode configuration,
//! - those that deal with SPI interrupt controlling,
//! - those that deal with SPI transfer and receive control.
//! .
//! <br />
//! \subsection xSPI_API_Group_Configure 2.1 2.1 SPI configuration control APIs
//!
//! - xSPIConfigSet()
//! - xSPIEnable()
//! - xSPIDisable()
//! - xSPISSSet()
//! .
//!
//! <br />
//! \subsection xSPI_API_Group_Interrupt 2.2 SPI Interrupt Control APIs
//! - xSPIIntEnable()
//! - xSPIIntDisable()
//! - xSPIStatusGet()
//! - xSPIIntCallbackInit()
//! .
//!
//! <br />
//! \subsection xSPI_API_Group_TransferReceiveData 2.3 SPI Transfer&Receive Control 
//!
//! - xSPIDataWrite()
//! - xSPIDataRead()
//! - xSPIBitLengthGet()
//! - xSPISingleDataReadWrite()
//! - xSPIIsTxFull()
//! - xSPIIsRxFull()
//! - xSPIIsTxEmpty()
//! - xSPIIsRxEmpty()
//! - xSPIIsBusy()
//! .
//! <br />
//! \section xSPI_Usage 3 Program Examples
//! The following example shows how to use the SPI APIs to configue SPI and to implement the 
//! function of transferring and receiving. 
//! \code
//! \code
//! #include "xhw_types.h"
//! #include "xsysctl.h"
//! #include "xhw_memmap.h"
//! #include "xspi.h"
//! #include "xhw_spi.h"
//! #include "xgpio.h"
//!
//! unsigned char ucSendData[] = "Wonderful World!";
//!
//! //*****************************************************************************
//!
//! //Ininite the SPI and implement the function of data transmission.
//!
//! //param None
//!
//! //This function is to ininite the SPI and implement the function of data transmission.
//!
//! //return none
//!
//! //*****************************************************************************
//! void SpiInitAndTransfer(void)
//! {
//!
//!    //
//!    // Step 1, Set SysClk 50MHz using Extern 12M oscillator
//!    //
//!    xSysCtlClockSet(50000000, xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_12MHZ);
//!
//!    //
//!    // Step 2, Enable Peripheral SPI0
//!    //
//!    xSysCtlPeripheralEnable2(SPI0_BASE);

//!    //
//!    // Step 3, Enable GPIO which is multiplex
//!    //
//!    xSysCtlPeripheralEnable(xGPIOSPinToPort(PC0));
//!    xSysCtlPeripheralEnable(xGPIOSPinToPort(PC1));
//!    xSysCtlPeripheralEnable(xGPIOSPinToPort(PC2));
//!    xSysCtlPeripheralEnable(xGPIOSPinToPort(PC3));

//!    //
//!    // Step 4, you should configures a pin for use as a SPI function
//!    //
//!    xSPinTypeSPI(SPI0_CS, PC0);
//!    xSPinTypeSPI(SPI0_CLK, PC1);
//!    xSPinTypeSPI(SPI0_MISO, PC2);
//!    xSPinTypeSPI(SPI0_MOSI, PC3);
//!
//!    //
//!    // Step 5, you should configure MCU as a master or slave device , data width 
//!    // MSB or LSB first and Mode
//!    //
//!    xSPIConfigSet(SPI0_BASE, 100000, xSPI_MOTO_FORMAT_MODE_1 |
//!                                            xSPI_MODE_MASTER | 
//!                                              xSPI_MSB_FIRST |
//!                                            xSPI_DATA_WIDTH8);
//!    //
//!    // Step 6, you should use SPI slave select pin to connect with an off-chip  
//!    // slave device. Slave select signal is active low.
//!    //
//!    xSPISSSet(SPI0_BASE, xSPI_SS_HARDWARE, xSPI_SS0); 
//!     
//!    //
//!    // Step 7, you can transfer data right now.
//!    //
//!    xSPIDataWrite(SPI0_BASE, ucSendData, 16);
//!  }
//!
//! \endcode
//! \note 
//!
//**************************************************************************










